#include "stm32f4xx.h"

void GPIO_Config(void);
void ADC_Config(void);
void TIM2_Config(void);
void EXTI_Config(void);
uint16_t Read_ADC(uint8_t channel);
void Set_Fan_Speed(uint8_t duty_cycle);
uint16_t Read_Temperature(void);

volatile uint8_t fan_state = 0;  // 0 = OFF, 1 = ON

int main(void)
{
    GPIO_Config();
    ADC_Config();
    TIM2_Config();
    EXTI_Config();

    GPIOC->ODR &= ~(1 << 13);  // Ensure buzzer is OFF at initialization

    while (1)
    {
        uint16_t temperature = Read_Temperature();

        // Priority 1: Turn fan OFF if temperature < 16°C
        if (temperature < 16)
        {
            fan_state = 0;
            Set_Fan_Speed(0);       // Stop PWM
            GPIOA->ODR &= ~(1 << 6); // Turn off PA6 LED (fan ON)
            GPIOA->ODR |= (1 << 7);  // Turn on PA7 LED (fan OFF)
            GPIOC->ODR &= ~(1 << 13);  // Turn off buzzer
        }
        // Priority 2: Turn fan ON if temperature > 50°C
        else if (temperature > 50)
        {
            fan_state = 1;
            GPIOA->ODR |= (1 << 6);  // Turn on PA6 LED (fan ON)
            GPIOA->ODR &= ~(1 << 7); // Turn off PA7 LED (fan OFF)
            Set_Fan_Speed(50);       // Default speed at 50%
            GPIOC->ODR |= (1 << 13);  // Turn on buzzer
        }
        else
        {
            GPIOC->ODR &= ~(1 << 13);  // Turn off buzzer
        }

        // Adjust fan speed if ON
        if (fan_state)
        {
            uint16_t adc_value = Read_ADC(2);  // Read potentiometer value
            uint8_t duty_cycle = (adc_value * 100) / 4095;  // Convert to percentage
            Set_Fan_Speed(duty_cycle);         // Adjust fan speed
        }
    }
}

void GPIO_Config(void)
{
    RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN | RCC_AHB1ENR_GPIOCEN;

    // Configure PA0 (button to turn fan ON) and PA5 (button to turn fan OFF) as input
    GPIOA->MODER &= ~((3 << (0 * 2)) | (3 << (5 * 2)));  // Clear mode bits for PA0 and PA5
    GPIOA->PUPDR &= ~((3 << (0 * 2)) | (3 << (5 * 2)));  // Clear pull-up/pull-down
    GPIOA->PUPDR |= (1 << (0 * 2)) | (1 << (5 * 2));     // Enable pull-up resistors

    // Configure PA1 as alternate function (PWM output for fan)
    GPIOA->MODER &= ~(3 << (1 * 2));
    GPIOA->MODER |= (2 << (1 * 2));
    GPIOA->AFR[0] |= (1 << (1 * 4));

    // Configure PA2 and PA3 as analog mode (potentiometer, LM35)
    GPIOA->MODER |= (3 << (2 * 2)) | (3 << (3 * 2));
    GPIOA->PUPDR &= ~((3 << (2 * 2)) | (3 << (3 * 2)));

    // Configure PA6 and PA7 as output (LEDs)
    GPIOA->MODER |= (1 << (6 * 2)) | (1 << (7 * 2));
    GPIOA->OTYPER &= ~(1 << 6) & ~(1 << 7);
    GPIOA->OSPEEDR |= (3 << (6 * 2)) | (3 << (7 * 2));

    // Configure PC13 as output (Buzzer)
    GPIOC->MODER |= (1 << (13 * 2));
    GPIOC->OTYPER &= ~(1 << 13);
    GPIOC->OSPEEDR |= (3 << (13 * 2));
}

void ADC_Config(void)
{
    RCC->APB2ENR |= RCC_APB2ENR_ADC1EN;
    ADC1->SQR3 = 2;                   // Channel 2 (PA2) first conversion
    ADC1->CR2 |= ADC_CR2_ADON;        // Enable ADC1
}

uint16_t Read_ADC(uint8_t channel)
{
    ADC1->SQR3 = channel;              // Set channel
    ADC1->CR2 |= ADC_CR2_SWSTART;      // Start conversion
    while (!(ADC1->SR & ADC_SR_EOC));  // Wait for conversion
    return ADC1->DR;                   // Return ADC value
}

void TIM2_Config(void)
{
    RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
    TIM2->PSC = 15;                   // Prescaler
    TIM2->ARR = 999;                  // Auto-reload
    TIM2->CCR2 = 0;                   // Initial duty cycle
    TIM2->CCMR1 |= (6 << 12);         // PWM mode 1
    TIM2->CCMR1 |= TIM_CCMR1_OC2PE;   // Enable preload
    TIM2->CCER |= TIM_CCER_CC2E;      // Enable output
    TIM2->CR1 |= TIM_CR1_CEN;         // Start timer
}

void EXTI_Config(void)
{
    RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN;

    SYSCFG->EXTICR[0] |= SYSCFG_EXTICR1_EXTI0_PA;  // Map PA0 to EXTI0
    SYSCFG->EXTICR[1] |= SYSCFG_EXTICR2_EXTI5_PA;  // Map PA5 to EXTI5

    EXTI->IMR |= (1 << 0) | (1 << 5);   // Enable interrupts for EXTI0 and EXTI5
    EXTI->RTSR |= (1 << 0) | (1 << 5);  // Trigger on rising edge

    NVIC_EnableIRQ(EXTI0_IRQn);         // Enable EXTI0 interrupt in NVIC
    NVIC_EnableIRQ(EXTI9_5_IRQn);       // Enable EXTI9_5 interrupt in NVIC
}

void Set_Fan_Speed(uint8_t duty_cycle)
{
    TIM2->CCR2 = (duty_cycle * (TIM2->ARR + 1)) / 100;  // Update PWM duty cycle
}

uint16_t Read_Temperature(void)
{
    uint16_t raw_value = Read_ADC(3);  // LM35 on PA3
    float voltage = (raw_value * 3.3) / 4095;
    return (uint16_t)(voltage * 100);  // Convert to °C
}

// Interrupt Handlers
void EXTI0_IRQHandler(void)
{
    if (EXTI->PR & (1 << 0))  // Check EXTI0
    {
        EXTI->PR |= (1 << 0);  // Clear flag
        fan_state = 1;         // Turn fan ON
        GPIOA->ODR |= (1 << 6);  // Fan ON LED
        GPIOA->ODR &= ~(1 << 7); // Fan OFF LED
    }
}

void EXTI9_5_IRQHandler(void)
{
    if (EXTI->PR & (1 << 5))  // Check EXTI5
    {
        EXTI->PR |= (1 << 5);  // Clear flag
        fan_state = 0;         // Turn fan OFF
        Set_Fan_Speed(0);       // Stop PWM
        GPIOA->ODR &= ~(1 << 6); // Fan ON LED
        GPIOA->ODR |= (1 << 7);  // Fan OFF LED
    }
}
